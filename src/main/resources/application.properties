server.port=8082

spring.application.name=springboot-sharing-jdbc-mybatis

spring.main.allow-bean-definition-overriding = true

mybatis.configuration.map-underscore-to-camel-case = true

#数据源 一主m1slave0 两从m1slave1,m1slave2
spring.shardingsphere.datasource.names = m1slave0,m1slave1,m1slave2

#数据源1 主库 master
spring.shardingsphere.datasource.m1slave0.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1slave0.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1slave0.url = jdbc:mysql://9.134.238.192:3306/test_sharding?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull&useSSL=false
spring.shardingsphere.datasource.m1slave0.username = root
spring.shardingsphere.datasource.m1slave0.password = Qaz.2464

spring.shardingsphere.datasource.m1slave1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1slave1.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1slave1.url = jdbc:mysql://9.134.238.192:3307/test_sharding?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull&useSSL=false
spring.shardingsphere.datasource.m1slave1.username = root
spring.shardingsphere.datasource.m1slave1.password = Qaz.2464

spring.shardingsphere.datasource.m1slave2.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1slave2.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1slave2.url = jdbc:mysql://9.134.238.192:3308/test_sharding?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull&useSSL=false
spring.shardingsphere.datasource.m1slave2.username = root
spring.shardingsphere.datasource.m1slave2.password = Qaz.2464

#--------------数据库分片-----------------
#由于不是多库因此不做分库策略 如果做分库策略 可以用 inline策略进行分库 也可以自定义策略名称实现PreciseShardingAlgorithm接口和下面的分表策略一起
#使用
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=m1slave0
#--------------数据库分片-----------------

#----------------------------数据表分片 start ----------------------------------------------------------------------------
#  物理真实表 m1代表数据库 t_user_{0-9} 此处是因为单库分表 如果是多库 则是m1slave$->{0..2} 或者是m1slave$->{1..2}
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes = m1slave0.t_user_$->{0..9}
#根据user_id进行分片的字段 此处的standard 需要与下面的一致 如果是 inline则下面的策略也是inline
spring.shardingsphere.sharding.tables.t_user.table-strategy.standard.sharding-column=user_id
#分片的策略 自定义为OrderTablesPreciseShardingConfig 该策略需要自己实现 PreciseShardingAlgorithm接口
#当前定义的类中是进行的精准分片策略
spring.shardingsphere.sharding.tables.t_user.table-strategy.standard.precise-algorithm-class-name=com.wuhao.config.OrderTablesPreciseShardingConfig
#----------------------------数据表分片 end ------------------------------------------------------------------------------

#公共表 数据字典表
spring.shardingsphere.sharding.broadcast-tables=t_call_system_info

#主键自增的列名
#spring.shardingsphere.sharding.tables.t_user.key-generator.column=user_id
#主键自增的算法类型  SNOWFLAKE 为雪花算法 此处也可以不要 使用外部的服务进行获取子自定义的id
#spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE

#--------------------------------------------mysql 主从配置 start---------------------------------------------------------
#配置默认数据源ds1 默认数据源,主要用于写
spring.shardingsphere.sharding.default-data-source-name=m1slave0
#配置主从名称
spring.shardingsphere.masterslave.name=masterSlave
#置主库master,负责数据的写入 配置的是规则
spring.shardingsphere.sharding.master-slave-rules.m1slave0.master-data-source-name= m1slave0
#配置从库slave节点
spring.shardingsphere.sharding.master-slave-rules.m1slave0.slave-data-source-names = m1slave1,m1slave2

#从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。若`load-balance-algorithm-class-name`存在则忽略该配置
#配置slave节点的负载均衡均衡策略,采用轮询机制
spring.shardingsphere.masterslave.load-balance-algorithm-type = round_robin

#--------------------------------------------mysql 主从配置 end-----------------------------------------------------------

#输出SQL
spring.shardingsphere.props.sql.show = true

logging.level.root = info
logging.level.org.springframework.web = info
logging.level.com.itheima.dbsharding  = debug
logging.level.druid.sql = debug

#mybatis
mybatis.type-aliases-package=com.wuhao.domain
mybatis.mapper-locations=classpath:mapper/*.xml


#xxl-job config
#lunix机器
xxl.job.admin.addresses = http://9.134.238.192:4090/xxl-job-admin
#本地
#xxl.job.admin.addresses = http://localhost:8080/xxl-job-admin
xxl.job.executor.appname = test-xxjob
#xxl.job.executor.ip = 192.168.50.13
xxl.job.executor.port = 9999
xxl.job.accessToken=
xxl.job.executor.logpath = /data/applogs/xxl-job/jobhandler
xxl.job.executor.logretentiondays = 30

#zipkin配置
spring.zipkin.base-url=http://9.134.238.192:9411/
spring.zipkin.enabled=true
spring.sleuth.sampler.probability=1
spring.zipkin.sender.type=web
#zipkin配置end

logging.config=classpath:log4j2.xml
logging.pattern.level=INFO

